{
  "name": "grunt-shell",
  "version": "0.2.2",
  "description": "Run shell commands",
  "keywords": [
    "gruntplugin",
    "shell",
    "command",
    "cmd",
    "exec",
    "spawn",
    "cli"
  ],
  "homepage": "https://github.com/sindresorhus/grunt-shell",
  "bugs": {
    "url": "https://github.com/sindresorhus/grunt-shell/issues"
  },
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "http://sindresorhus.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/sindresorhus/grunt-shell.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "devDependencies": {
    "grunt": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "licenses": {
    "type": "MIT"
  },
  "readme": "# grunt-shell\r\n\r\n*Requires grunt 0.4. Use version 0.1.4 for grunt 0.3 compatibility*\r\n\r\n[Grunt][grunt] task to run shell commands.\r\n\r\nA good way to interact with other CLI tools. E.g. compiling Compass `compass compile` or get the current git branch `git branch`.\r\n\r\n\r\n## Getting Started\r\n\r\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-shell --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-shell');\r\n```\r\n\r\n[grunt]: http://gruntjs.com\r\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\r\n\r\n\r\n## Documentation\r\n\r\n\r\n### Example usage\r\n\r\n\r\n#### Run command\r\n\r\nCreate a folder named `test`.\r\n\r\n```javascript\r\nshell: {\r\n\tmakeDir: {\r\n\t\tcommand: 'mkdir test'\r\n\t}\r\n}\r\n```\r\n\r\nThe `command` property supports templates :\r\n\r\n```javascript\r\ntestDir: 'test',\r\nshell: {\r\n\tmakeDir: {\r\n\t\tcommand: 'mkdir <%= testDir %>'\r\n\t}\r\n}\r\n```\r\n\r\n\r\n#### Run command and display the output\r\n\r\nOutput a directory listing in your Terminal.\r\n\r\n```javascript\r\nshell: {\r\n\tdirListing: {\r\n\t\tcommand: 'ls',\r\n\t\toptions: {\r\n\t\t\tstdout: true\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n\r\n#### Custom callback\r\n\r\nDo whatever you want with the output.\r\n\r\n```javascript\r\nfunction log(err, stdout, stderr, cb) {\r\n\tconsole.log(stdout);\r\n\tcb();\r\n}\r\n\r\n...\r\n\r\nshell: {\r\n\tdirListing: {\r\n\t\tcommand: 'ls',\r\n\t\toptions: {\r\n\t\t\tcallback: log\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n\r\n#### Option passed to the .exec() method\r\n\r\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` (current working directory) option.\r\n\r\n```javascript\r\nshell: {\r\n\tsubfolderLs: {\r\n\t\tcommand: 'ls',\r\n\t\toptions: {\r\n\t\t\tstdout: true,\r\n\t\t\texecOptions: {\r\n\t\t\t\tcwd: 'tasks'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n\r\n#### Multiple commands\r\n\r\nRun multiple commands by placing them in an array which is joined using `&&` or `;`.\r\n\r\n```javascript\r\nshell: {\r\n\tmultiple: {\r\n\t\tcommand: [\r\n\t\t\t'mkdir test',\r\n\t\t\t'cd test',\r\n\t\t\t'ls'\r\n\t\t].join('&&')\r\n\t}\r\n}\r\n```\r\n\r\n\r\n### Config\r\n\r\n\r\n#### command\r\n\r\n**Required**  \r\nType: `String`\r\n\r\nThe command you want to run. Supports templates.\r\n\r\n\r\n### Options\r\n\r\n\r\n#### stdout\r\n\r\nDefault: `false`  \r\nType: `Boolean`\r\n\r\nShow stdout in the Terminal.\r\n\r\n\r\n#### stderr\r\n\r\nDefault: `false`  \r\nType: `Boolean`\r\n\r\nShow stderr in the Terminal.\r\n\r\n\r\n#### failOnError\r\n\r\nDefault: `false`  \r\nType: `Boolean`\r\n\r\nFail task if it encounters an error. Does not apply if you specify a `callback`.\r\n\r\n\r\n#### callback(err, stdout, stderr, cb)\r\n\r\nDefault: `function () {}`  \r\nType: `Function`\r\n\r\nLets you override the default callback with your own.\r\n\r\n**Make sure to call the `cb` method when you're done.**\r\n\r\n\r\n#### execOptions\r\n\r\nDefault: `undefined`  \r\nAccepts: Object\r\n\r\nSpecify some options to be passed to the [.exec()](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\r\n\r\n- `cwd` String *Current working directory of the child process*\r\n- `env` Object *Environment key-value pairs*\r\n- `setsid` Boolean\r\n- `encoding` String *(Default: 'utf8')*\r\n- `timeout` Number *(Default: 0)*\r\n- `maxBuffer` Number *(Default: 200\\*1024)*\r\n- `killSignal` String *(Default: 'SIGTERM')*\r\n\r\n\r\n## Upgrade from 0.1.4 to 0.2.0\r\n\r\nBecause of the transition to grunt 0.4 there are some changes. To conform to new grunt standards, all options are now to be specified in an `options` object. I also took the opportunity to improve the task. The `stdout` and `stderr` options now only supports a boolean. If you want to do something with the result use the `callback` option. The `callback` option also changed.\r\n\r\n\r\n## Tests\r\n\r\nGrunt currently doesn't have a way to test tasks directly. You can test this task by running `grunt` and manually verify that it works.\r\n\r\n\r\n## Contribute\r\n\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\r\n\r\n\r\n## License\r\n\r\nMIT License • © [Sindre Sorhus](http://sindresorhus.com)\r\n",
  "readmeFilename": "readme.md",
  "_id": "grunt-shell@0.2.2",
  "_shasum": "b433a1d045e40987e0678c5a8da000e638a34aed",
  "_resolved": "git://github.com/c0rrupt/grunt-shell.git#a66cb07032d470cb624c3630256005041f9cd827",
  "_from": "grunt-shell@git://github.com/c0rrupt/grunt-shell.git"
}
